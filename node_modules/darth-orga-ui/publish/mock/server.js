"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _newArrowCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/newArrowCheck"));

var _mockjs = _interopRequireDefault(require("mockjs"));

var _this = void 0;

(function () {
  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;
  enterModule && enterModule(module);
})();

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal["default"].signature : function (a) {
  return a;
};

var mr = _mockjs["default"].Random; //提取mock的随机对象

_mockjs["default"].mock('/mock/tree', 'get', {
  "data": [{
    'id|2-3': /\d{5,10}\-/,
    'title': mr.title(3, 5),
    "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
    "update-data": '@date("yyyy-MM-dd hh:mm:ss")',
    "children|0-10": [{
      'id|2-3': /\d{5,10}\-/,
      'title': mr.title(3, 5),
      "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
      "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
    }]
  }],
  error: 0,
  msg: '成功'
});

_mockjs["default"].mock('/mock/addTree', 'post', function (option) {
  (0, _newArrowCheck2["default"])(this, _this);
  var body = JSON.parse(option.body);
  return _mockjs["default"].mock({
    "data": {
      'id|2-3': /\d{5,10}\-/,
      'title': body.org,
      "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
      "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
    },
    error: 0,
    msg: '成功'
  });
}.bind(void 0));

_mockjs["default"].mock('/mock/editTree', 'post', function (option) {
  (0, _newArrowCheck2["default"])(this, _this);
  var body = JSON.parse(option.body);
  return _mockjs["default"].mock({
    "data": {
      'id': body.id,
      'title': body.org,
      "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
      "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
    },
    error: 0,
    msg: '成功'
  });
}.bind(void 0));

_mockjs["default"].mock('/mock/org', 'get', {
  "data": {
    'id': mr.guid(),
    'org': mr.title(3, 5),
    'parent': mr.title(3, 5),
    "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
    "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
  },
  error: 0,
  msg: '成功'
});

_mockjs["default"].mock('/mock/users', 'get', {
  "data|5-20": [{
    'id': '@guid',
    'name': '@cname',
    'org': '技术研发中心',
    'type': '内部',
    'account': "@email",
    "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
    "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
  }],
  error: 0,
  msg: '成功'
});

_mockjs["default"].mock('/mock/adduser', 'post', function (options) {
  var body = JSON.parse(options.body);
  return _mockjs["default"].mock({
    "data": _objectSpread(_objectSpread({
      'id': '@guid'
    }, body), {}, {
      "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
      "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
    }),
    error: 0,
    msg: '成功'
  });
});

_mockjs["default"].mock('/mock/editUser', 'post', function (options) {
  var body = JSON.parse(options.body);
  return _mockjs["default"].mock({
    "data": _objectSpread(_objectSpread({}, body), {}, {
      "create-data": '@date("yyyy-MM-dd hh:mm:ss")',
      "update-data": '@date("yyyy-MM-dd hh:mm:ss")'
    }),
    error: 0,
    msg: '成功'
  });
});

;

(function () {
  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(mr, "mr", "/Users/mahai/Desktop/darth-platform-ui/packages/darth-orga-ui/src/mock/server.js");
})();

;

(function () {
  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;
  leaveModule && leaveModule(module);
})();